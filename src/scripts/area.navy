
// NavyJS ~ 0.1-lite

[OVERLAY name=Area, ctx=Canvas, author=ChartMaster, version=1.0.0]

// Define new props
prop('color', { type: 'Color', def: '#31ce31' })
prop('lineWidth', { type: 'number', def: 1.25 })
prop('back1', { type: 'Color', def: $props.color + '15' })
prop('back2', { type: 'Color', def: $props.color + '01' })

draw(ctx) {

    const layout = $core.layout
    const data = $core.data // Full dataset
    const view = $core.view // Visible view
    const grd = ctx.createLinearGradient(0, 0, 0, layout.height)
    grd.addColorStop(0, $props.back1)
    grd.addColorStop(1, $props.back2)

    // Line
    ctx.lineWidth = $props.lineWidth
    ctx.strokeStyle = $props.color
    ctx.lineJoin = "round"
    ctx.beginPath()
    for (var i = view.i1, n = view.i2; i <= n; i++) {
        let p = data[i]
        let x = layout.ti2x(p[0], i)
        let y = layout.value2y(p[1])
        ctx.lineTo(x, y)
    }
    ctx.stroke()

    // Area
    ctx.fillStyle = grd
    ctx.beginPath()
    let p0 = (data[0] || [])[0]
    let pN = (data[data.length - 1] || [])[0]
    ctx.lineTo(layout.ti2x(p0, 0), layout.height)
    for (var i = view.i1, n = view.i2; i <= n; i++) {
        let p = data[i]
        let x = layout.ti2x(p[0], i)
        let y = layout.value2y(p[1])
        ctx.lineTo(x, y)
    }
    ctx.lineTo(layout.ti2x(pN, i - 1), layout.height)
    ctx.fill()

}

// Legend, defined as pairs [value, color]
legend(x) => [[x[1], $props.color]]
